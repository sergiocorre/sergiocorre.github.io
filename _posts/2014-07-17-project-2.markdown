---
layout: default
modal-id: 2
date: 2014-07-17
img: cake.png
alt: image-alt
project-date: April 2014
client: Start Bootstrap
category: Web Development
description: # Dating API V 2

**Version: 2021 - 04 - 16**

## Introduction

Dating provides a simple REST API to manage the users.

This API reference provides information on available endpoints and how to interact with it.

## Authentication

Dating API authentication is based on two concepts, IP whitelist and API key.

Since the API key is already connected internally to your affiliate ID, there is no need to specify your affiliate ID in the requests.

All requests must contain an API key in the headers:

```
Authorization The api key as a string
```
**Example**

```
Authorization: 123454630809345sdfsdfs
```
You should never share your API key.

**Note:** To add your server IP in the whitelist and get your API key, please contact us directly.

## Interacting with the API

Each call can return specific server responses but there are some global codes defined.

### Status codes

```
200 OK Successful request
201 Created New user created
204 No content Object deleted
400 Bad Request Validation error
401 Unauthorized Couldn't authenticate your request
402 Affise Error: Wrong offer ID The value in affise_affiliate_id is wrong or not needed
404 Not Found No such object
405 Method Not Allowed Http method not allowed in the request
429 Too Many Requests Rate limit exceeded
500 Internal Something went wrong
503 Service Unavailable Your connection is being throttled or the service is down for maintenance
```
## Making requests

Following the REST constrains, the Dating API implements the following HTTP methods:

```
GET - Read resources
POST - Create new resources
PUT - Modify existing resources
DELETE - Remove resources
```
When making requests, arguments must be passed as params.

## Response Format

All responses will be in JSON and will contain the **status_code** , the same values returned by the HTTP status code in the response, and the **success** field with
two possible values **true** or **false**. In case of **false** it will contain some information about the possible error or errors.

### Success response

**Example**

```
{
"success": true,
"data": {
"user_email": "john@mail.com",
"email_validation": {
"email": "john@mail.com",
"status": "valid",
"corrected": null,
"emailReceptionEnabled": true
},
"auto_login": "https:\/\/wellhello.com\/site\/user\/fastlogin\/tour\/a35f4b1ba4151137c31a0c160c34e49b\/12"
},
"status_code": 201
}
```

### Error response

All errors return a single error message, except the validation ones, which return all the validation error messages.

**Validation error example**

```
{
"success": false,
"data": {
"error": "Bad Request",
"errors": {
"gender": "Required Field",
"birth_date": "The 'birth_date' must be at least 18 years ago"
}
},
"status_code": 400
}
```
You will find more examples below, in the CREATE USER section.

## CORS

Dating API v 2 does not support cross-origin HTTP requests (commonly referred as CORS). This means that you cannot call API resources using Javascript from
any browser.

NOTE: Create user endpoint is the only one that supports cross-origin HTTP requests.

## Localization

Dating API v 2 only supports English localization for error messages, numbers, dates, and other strings.

## Timestamps

All timestamps are returned in ISO 8601 format in UTC with fields ending in the suffix '_at'. Example: "created_at": " 2015 - 07 - 01 T 00  55  47 Z"

## Versioning

We only have one API version active at any given time. If we make changes that will break compatibility, we will update the version in the endpoint path and the old
version will be maintained for 6 months.

## Changelog

Recent changes and additions to API v 2.

```
2016-12-05 : Added user creation endpoint.
2016-12-19 : Updated some field names in user creation request.
2018-10-05 : Updated some field names and provided more examples in user creation request.
2018-11-13 : Added CORS support for create user endpoint. Added 429 status code error.
2018-11-23 : Fixed issue in the php curl example.
2019-06-11 : Updated some data params descriptions and added more response examples.
2019-09-26 : Removed param Country.
2019-12-05 : Added payment links information.
2021-04-16 : Removed param ZIP code, fixed cURL example, extended nickname description, added JavaScript example.
2021-10-29 : Updated Authentication and Status codes sections. Updated affise_affiliate_id field description.
2022-03-15 : Added Member Area link
```
## User endpoints

### CREATE USER

Create a new user in a Dating site.

```
URL
```
```
https://{dating_site}/v 2 /api/user - Example https://wellhello.com/v 2 /api/user
```
```
Method
```
```
POST
```
```
Data Params
```
```
Field Optional Explanation
```
```
email No User email, must be valid. It will be verified by a third party service.
```
```
gender No User gender, possible options [ male, female, couple ].
```
```
password No User password, must have between 3 and 64 characters.
```

```
birth_date No User birth date, format YYYY-MM-DD. Example: 1983 - 10 - 12 for Oct 12 th 1983. The user must be at least 18 years old.
```
```
client_ip No Current user IP, both IPv 4 or IPv 6 format are accepted.
```
```
nickname Yes User nickname, autogenerated if not filled. Must be unique. Must have between 1 and 16 alphanumeric characters.
```
```
client_user_agent Yes The client browser user agent.
```
```
tracking[Identifier] Yes Your custom tracking data. Example: tracking[clickid]= 1234 - 4567. It can be set multiple times with different Identifiers.
```
```
sub_id Yes Your custom traffic source tracking data.
```
```
affise_affiliate_id Yes Tclhicek^ Aidff cisaen^ i notd^ of bteh er^ ectrreieavtored, tthhea tc^ wreilal^ tmionak eo^ ft hthee^ syst useer mw^ irlel qufaile. stPl^ eforas^ ea cdlonick'ti din^ acnludd^ pea tstheis^ itf^ ieintold i^ nt hteh^ etr raecqukinegst,^ iunn^ cleassse athskaet^ dth.e
```
```
Success Response:
```
```
201 Created New user created
```
#### {

```
"success": true,
"data": {
"user_email": "john@mail.com",
"email_validation": {
"email": "john@mail.com",
"status": "valid",
"corrected": null,
"emailReceptionEnabled": true
},
"auto_login": "https:\/\/wellhello.com\/site\/user\/fastlogin\/tour\/a35f4b1ba4151137c31a0c160c34e49b\/12"
},
"status_code": 201
}
```
```
Upon request, payment links (trial, monthly and yearly) can be returned in the response
```
#### {

"success": true,
"data": {
"user_email": "john@mail.com",
"email_validation": {
"email": "john@mail.com",
"status": "valid",
"corrected": null,
"emailReceptionEnabled": true
},
"auto_login": "https:\/\/wellhello.com\/site\/user\/fastlogin\/tour\/a35f4b1ba4151137c31a0c160c34e49b\/12",
"payment_links": {
"djs": {
"trial": "https://secure.wellhello.com/join/join.php?
origin=WellHello&force_new_session=1&force_reselect=1&user_id=137104849&product_id=28&hash=e29f507bb44437cc8d5088f57c3080cf8a66c
2fb1-4d5c-b0bf-0fcffa2a94b5&pi_code=",
"month": "https://secure.wellhello.com/join/join.php?
origin=WellHello&force_new_session=1&force_reselect=1&user_id=137104849&product_id=28&hash=ecbd01fab44437cc8d5088f57c3080cf8a66c
2fb1-4d5c-b0bf-0fcffa2a94b5&pi_code=month",
"year": "https://secure.wellhello.com/join/join.php?
origin=WellHello&force_new_session=1&force_reselect=1&user_id=137104849&product_id=28&hash=52c929c3b44437cc8d5088f57c3080cf8a66c549c
2fb1-4d5c-b0bf-0fcffa2a94b5&pi_code=year"
}
},
"status_code": 201
}

```
And Member Area link
```
{
"success": true,
"data": {
"user_email": "john@mail.com",
"email_validation": {
"email": "john@mail.com",
"status": "valid",
"corrected": null,
"emailReceptionEnabled": true
},
"auto_login": "https:\/\/wellhello.com\/site\/user\/fastlogin\/tour\/a35f4b1ba4151137c31a0c160c34e49b\/12",
"member_area_link": "https:\/\/wellhello.com\/site\/user\/fastlogin\/tour\/a35f4b1ba4151137c31a0c160c34e49b\/12?
r=https:\/\/wellhello.com\/site\/user\/home"
},


"status_code": 201
}

```
Error Response:
```
```
400 Bad Request Validation of the resource fails on POST or PUT requests. It returns a JSON with the error message.
```
#### {

```
"success": false,
"data": {
"error": "Bad Request",
"errors": {
"gender": "Required Field",
"birth_date": "The 'birth_date' must be at least 18 years ago"
}
},
"status_code": 400
}
```
```
401 Unauthorized Your ip is not white list
```
```
{
"success": false,
"data": {
"error": "Remote IP is not in the white list",
"exception": {
"message": "Remote IP is not in the white list",
"code": 401
}
},
"status_code": 401
}
```
```
401 Unauthorized Your token is not valid
```
```
{
"success": false,
"data": {
"error": "Token not found",
"exception": {
"message": "Token not found",
"code": 401
}
},
"status_code": 401
}
```
```
405 Method Not Allowed Http method not allowed in the request
```
```
406 Not Acceptable The email verification service marks the email as invalid and unreachable
```
```
{
"success": false,
"data": {
"error": "The email is not valid"
},
"status_code": 406
}
```
```
409 Conflict There is a user already registered with this email
```
```
{
"success": false,
"data": {
"error": "Another user with the email 'john@mail.com' already exists",
"exception": {
"message": "Another user with the email 'john@mail.com' already exists",
"code": 409
}
},
"status_code": 409
}
```
```
429 Too Many Requests You reached the request limit per minute.
```
```
500 Internal Server Error Something went wrong. Please contact us to check it.
```

## Examples

**cURL example:**

```
curl -X POST \
https://wellhello.com/v2/api/user \
-H 'Authorization: 123454630809345sdfsdfs' \
-H 'Cache-Control: no-cache' \
-H 'content-type: application/x-www-form-urlencoded' \
-d 'email=youremail@somedomain.com' \
-d gender=male \
-d password=test \
-d birth_date=1985-06-27 \
-d client_ip=192.168.0.1 \
-d sub_id=87654321-
-d tracking[clickid]=1234-4567 \
```
**PHP example:**

```
$post_data = [
"email" => "john@mail.com",
"gender" => "male",
"password" => "test",
"birth_date" => "1985-06-27",
"client_ip" => "192.168.0.1",
"tracking" => [
"clickid" => "1234-4567",
],
"sub_id" => "87654321-7896",
];
```
```
// Call to the WH API
$ch = curl_init();
curl_setopt($ch, CURLOPT_URL, 'https://wellhello.com/v2/api/user');
curl_setopt($ch, CURLOPT_HTTPHEADER, [
'Authorization: 123454630809345sdfsdfs',
]);
curl_setopt($ch, CURLOPT_CUSTOMREQUEST, "POST");
curl_setopt($ch, CURLOPT_POSTFIELDS, http_build_query($post_data));
curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);
$response = curl_exec($ch);
curl_close($ch);
```
```
$response = json_decode($response, false);
```
```
if(is_null($response) || $response->success === false){
// Your failure code
}else{
header("Location: ".$response->data->autologin);
exit;
}
```
**JavaScript example:**

```
const url = 'https://wellhello.com/v2/api/user';
let data = {
"email": "johnny@mail.com",
"password": "bgoode",
"gender": "male",
"birth_date": "1926-10-18",
"client_ip":"192.168.0.1",
"tracking": {
"click_id": "helloclick"
}
}
let fetchData = {
method: 'POST',
body: JSON.stringify(data),
headers: new Headers({
'Content-Type': 'application/json',
'Authorization': 'abc123abc123abc123abc123abc123ab'
})
}
fetch(url, fetchData)
.then(response => response.json())
.catch((error) => { console.error('Error:', error);
});
```

**Smoochy API PHP SDK example:**

You have to use the factory to instantiate the client, passing both the api key and the endpoint

```
$api = SmoochyApiFactory::create("acbd18db4cc2f85cedef654fccc4a4d8", "https://wellhello.com");
```
You can register a user executing register method on the API client.

```
/** @var \Cmp\Smoochy\Sdk\Response\CreateUserResponse.$response*/
$response = $api->register([
"foo.bar@example.com", // email
"password", // password
"male", // gender
"US", // country code
"8.8.8.8", // client ip
"1985-06-09", // birth date
"facebook_campaign", // Sid
[
"click_id" => "1234-4567",
"ad_id" => "87654321-7896"
], // custom tracking
"FooBar66", // Nickname
"Chrome-Webkit/60", // client user agent
"tour_id", // The tour id
"affiliate_id", // Affiliate Id
]);
```
You can check if the request succeeded by calling isSuccessful on the response.

After successfully creating a user you can use the login link to redirect the user to the application

```
if ($response->isSuccessful()) {
// User has been created, get autologin link
$response->getAutologin();
}
```
If there is an error you can get more info calling getError

```
if (!$response->isSuccessful()) {
echo "Error: ".$response->getError();
}
```
If the error is a validation error, you will have extra info of the invalid parameters with getValidationErrors

```
if (!$response->isSuccessful() && $response->isBadRequest()) {
echo "Error: ".$response->getError();
foreach ($response->getValidationErrors() as $field => $error) {
echo " - $field => $error \n";
}
}
```
Whenever the client hits an unexpected error (server down, timeout, blank page, unknown format...) the API client will throw a
\Cmp\Smoochy\Sdk\Exception\ApiException.

You are advised to cacth this exceptions and act accordingly

```
try {
return $api->register(...);
} catch(ApiException $exception) {
// Handle the exception
}
```


---
